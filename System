#include <iostream>
#include <string>
#include <unordered_map>
#include <cctype>
#include <limits>
using namespace std;

void clearScreen() {
    for (int i = 0; i < 35; ++i) {
        cout << endl;
    }
}

struct RoomInfo {
    string RoomName;
    string RoomNumber;
    string Building;
    string Floor;
};
unordered_map<string, RoomInfo> Rooms = {
    {"1", {"Computer Laboratory", "205 - 208", "ICS Building", "2nd"}},
    {"2", {"Science Laboratory", "104", "ICS Building", "1st"}},
    {"3", {"Guidance Office", "204", "Admin Building", "2nd"}},
    {"4", {"Clinic", "104", "Admin Building", "1st"}},
    {"5", {"Library", "205", "Admin Building", "2nd"}},
    {"6", {"ICS Office", "101", "Admin Building", "1st"}},
    {"7", {"ITE Office", "104", "ITE Building", "1st"}},
    {"8", {"IOB Office", "103", "IOB Building", "1st"}},
};

void printRoomInfo(int inputRoomNumber) {
    string roomName = to_string(inputRoomNumber);

    auto it = Rooms.find(roomName);
    if (it != Rooms.end()) {
        const RoomInfo& roomInfo = it->second;
        cout << "--Room Information--" << endl;
        cout << " +----------------------------+" << endl;
        cout << " | Room:      " << roomInfo.RoomName << endl;
        cout << " | Room No:   " << roomInfo.RoomNumber << endl;
        cout << " | Building:  " << roomInfo.Building << endl;
        cout << " | Floor:     " << roomInfo.Floor << endl;
        cout << " +----------------------------+" << endl;
    } else {
        cout << "Room not found." << endl;
    }
}



void displayCourses(){
    cout << "            COLEGIO DE MONTALBAN COURSES:             " << endl;
    cout << " +---------------------------------------------------+" << endl;
    cout << " |Institute of Comouter Studies:                                  |" << endl;
    cout << " |  •Bachelor of Science in Computer Engineering.    |" << endl;
    cout << " |  •Bachelor of Science in Information Technology.  |" << endl;
    cout << " |Institute of Education:                                  |" << endl;
    cout << " |  •Bachelor of Elementary Education Generalist.    |" << endl;
    cout << " |  •Bachelor of Secondary Education.                |" << endl;
    cout << " |Institute of Bussiness:                                  |" << endl;
    cout << " |  •Bachelor of Science in Entrepreneurship.        |" << endl;
    cout << " |  •Bachelor of Science in Business Administration. |" << endl;
    cout << " +---------------------------------------------------+" << endl;
    cout << "\n" << endl;
};

struct TeacherInfo {
    string name;
    string subject;
    string Institute;
    string Faculty;
    int RoomNo;
    string Schedule[7]; 
};

unordered_map<string, TeacherInfo> TeachersMap = {
    {"001", {"Benzur Otibruz", "Programming 1", "ICS", "ICS Building", 207, {
        "Monday:    7am - 10am,    1A,    205,   ICS Building",
        "Monday:    1pm - 4pm,     1B,    205,   ICS Building",
        "Tuesday:   7am - 10am,    1A,    205,   ICS Building",
        "Tuesday:   3pm - 7pm,     1B,    205,   ICS Building",
        "Wednesday: 8am - 12nn,    1C,    205,   ICS Building",
        "Thursday:  7am - 10am,    1D,    205,   ICS Building",
        "Friday:    8am - 12nn,    1E,    205,   ICS Building"
    }}},
    {"112", {"Roovesvelt Luat", "Mathematics", "IOB",  "IOB Building", 200, {
        "Monday:    7am - 10am,    1A,    201,   IOB Building",
        "Monday:    1pm - 4pm,     1B,    201,   IOB Building",
        "Tuesday:   7am - 10am,    1A,    201,   IOB Building",
        "Tuesday:   7am - 10am,    1B,    201,   IOB Building",
        "Wednesday: 8am - 12nn,    1C,    201,   IOB Building",
        "Thursday:  7am - 10am,    1D,    201,   IOB Building",
        "Friday:    8am - 12nn,    1E,    201,   IOB Building"
    }}},
    {"223",  {"Chrizel Abayon", "Understanding The Self", "ITE", "ITE Building", 300, {
        "Monday:    7am - 10am,    1A,    301,   ITE Building",
        "Monday:    1pm - 4pm,     1B,    301,   ITE Building",
        "Tuesday:   7am - 10am,    1A,    301,   ITE Building",
        "Tuesday:   7am - 10am,    1B,    301,   ITE Building",
        "Wednesday: 8am - 12nn,    1C,    301,   ITE Building",
        "Thursday:  7am - 10am,    1D,    301,   ITE Building",
        "Friday:    8am - 12nn,    1E,    301,   ITE Building"
    }}},    
    {"334",  {"Medilyn Elena Almazan","Calculus", "IOB", "IOB Building", 104, {
        "Monday:    7am - 10am,    1A,    101,   IOB Building",
        "Monday:    1pm - 4pm,     1B,    101,   IOB Building",
        "Tuesday:   7am - 10am,    1A,    101,   IOB Building",
        "Tuesday:   7am - 10am,    1B,    101,   IOB Building",
        "Wednesday: 8am - 12nn,    1C,    101,   IOB Building",
        "Thursday:  7am - 10am,    1D,    101,   IOB Building",
        "Friday:    8am - 12nn,    1E,    101,   IOB Building"    
    }}},
    {"445",  {"Ivy Almazan","Science", "ITE", "  ITE Building", 206, {
        "Monday:    7am - 10am,    1A,    201,   ITE Building",
        "Monday:    1pm - 4pm,     1B,    201,   ITE Building",
        "Tuesday:   7am - 10am,    1A,    201,   ITE Building",
        "Tuesday:   7am - 10am,    1B,    201,   ITE Building",
        "Wednesday: 8am - 12nn,    1C,    201,   ITE Building",
        "Thursday:  7am - 10am,    1D,    201,   ITE Building",
        "Friday:    8am - 12nn,    1E,    201,   ITE Building"    
    }}},
    {"556", {"John Benzur Cagalitan", "Physics", "ICS", "ICS Building", 207, {
        "Monday:    7am - 10am,    1A,    205,   ICS Building",
        "Monday:    1pm - 4pm,     1B,    205,   ICS Building",
        "Tuesday:   7am - 10am,    1A,    205,   ICS Building",
        "Tuesday:   3pm - 7pm,     1B,    205,   ICS Building",
        "Wednesday: 8am - 12nn,    1C,    205,   ICS Building",
        "Thursday:  7am - 10am,    1D,    205,   ICS Building",
        "Friday:    8am - 12nn,    1E,    205,   ICS Building"
    }}},
};

void findTeacherByName(const string& name, string matchingTeachers[], int& count) {
    count = 0;
    for (const auto& teacher : TeachersMap) {
        if (teacher.second.name.find(name) != string::npos) {
            matchingTeachers[count++] = teacher.first;
        }
    }
}

void get_Teacher_info() {
    string TeacherName;
    cout << "Enter Teacher's Name: ";
    cin >> TeacherName;

    string matchingTeachers[10];
    int count;
    findTeacherByName(TeacherName, matchingTeachers, count);

    if (count == 0) {
        cout << "No teacher found." << endl;
        get_Teacher_info();
    } else if (count == 1) {
        auto it = TeachersMap.find(matchingTeachers[0]);
        if (it != TeachersMap.end()) {
            TeacherInfo Teacher_info = it->second;
            cout << "---Teacher's Information---" << endl;
            cout << "  Full Name: " << Teacher_info.name << "       " << endl;
            cout << "  Subject:   " << Teacher_info.subject << "        " << endl;
            cout << "  Institute: " << Teacher_info.Institute << "                  " << endl;
            cout << "  Faculty:   " << Teacher_info.Faculty << "         " << endl;
            cout << "  Room No:   " << Teacher_info.RoomNo << "                  " << endl;
            cout << "  Schedule for the week:               " << endl;
            cout << "+------------------------------------------------------------+" << endl;
            cout << "|   Day   |    Time     |     Section    | Room  |  Building | " << endl;
            cout << "+------------------------------------------------------------+" << endl;
            for (const string& day : Teacher_info.Schedule) {
                cout << "| " << day << " |" << endl;
            }
            cout << "+------------------------------------------------------------+" << endl;
        } else {
            cout << "Invalid teacher." << endl;
            get_Teacher_info();
        }
    } else {
        cout << "Multiple teachers found with that name. Select a teacher:" << endl;
        for (int i = 0; i < count; ++i) {
            cout << i + 1 << ". " << TeachersMap[matchingTeachers[i]].name << endl;
        }
        int choice;
        cout << "Enter Choice: ";
        while (!(cin >> choice) || choice <= 0 || choice > count) {
            cout << "Invalid choice. Enter a number between 1 and " << count << ": ";
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
        }
            auto it = TeachersMap.find(matchingTeachers[choice - 1]);
            if (it != TeachersMap.end()) {
                TeacherInfo Teacher_info = it->second;
                cout << "---Teacher's Information---" << endl;
                cout << "  Full Name: " << Teacher_info.name << "       " << endl;
                cout << "  Subject:   " << Teacher_info.subject << "        " << endl;
                cout << "  Institute: " << Teacher_info.Institute << "                  " << endl;
                cout << "  Faculty:   " << Teacher_info.Faculty << "         " << endl;
                cout << "  Room No:   " << Teacher_info.RoomNo << "                  " << endl;
                cout << "  Schedule for the week:               " << endl;
                cout << "+------------------------------------------------------------+" << endl;
                cout << "|   Day  |   Time  | Section  | Room  |  Building | " << endl;
                cout << "+------------------------------------------------------------+" << endl;
                for (const string& day : Teacher_info.Schedule) {
                    cout << "| " << day << " |" << endl;
                }
                cout << "+------------------------------------------------------------+" << endl;
            } else {
                cout << "Invalid choice." << endl;
                get_Teacher_info();
            }
        }
    }


struct Office {
    string building;
    string room_number;
    string Floor;
};

unordered_map<string, Office> offices = {
    {"1", {"Admin Building", "101", "1st"}},
    {"2", {"IOB Building", "210", "1st"}},
};

class Registrar {
public:
    Registrar() {}

    int generateClientNumber(string officeId) {
        if (clientNumbers.find(officeId) == clientNumbers.end()) {
            clientNumbers[officeId] = 1;
        }
        return clientNumbers[officeId]++;
    }

private:
    unordered_map<string, int> clientNumbers;
};

void get_office_info(Registrar& registrar) {
    bool validOffice = false;
    while (!validOffice) {
        string office;
        cout << "\nOffices:" << endl;
        cout << "[1]. Registrar" << endl;
        cout << "[2]. Accounting" << endl;
        cout << "Enter office: ";
        cin >> office;
        auto it = offices.find(office);
        if (it != offices.end()) {
            validOffice = true;
            Office office_info = it->second;
            int clientNumber = registrar.generateClientNumber(office);
            cout << "+-----------------------------------+" << endl;
            cout << "|         Office Information        |" << endl;
            cout << "+-----------------------------------+" << endl;
            cout << "| Building:      " << office_info.building << endl;
            cout << "| Room Number:   " << office_info.room_number << endl;
            cout << "| Floor Number:  " << office_info.Floor << endl;
            cout << "| Client Number: " << clientNumber << endl;
            cout << "+-----------------------------------+" << endl;
            cout << "\n" << endl;
        } else {
            cout << "\nInvalid office!!" << endl;
        }
    }
}

struct StudentInfo {
    string name;
    string course;
    string year;
    string section;
};

unordered_map<string, StudentInfo> students = {
    {"23-0001", {"John Paul Cagalitan", "BSCPE", "1st Year-Freshman", "1A"}},
    {"23-0002", {"Edriz Bulagao", "BSED", "1st Year-Freshman", "1B"}},
    {"23-0003", {"Mark Zander Emperio", "BSCPE", "2nd Year-Sophomore", "2C"}},
    {"23-0004", {"Sheica Ochada", "BSIT", "1st Year-Freshman", "1D"}},
    {"23-0005", {"Cody Aguayon", "BSCPE", "4th Year-Senior", "4E"}},
    {"23-0006", {"Christian Tau-toan", "BSIT", "4th Year-Senior", "4A"}},
    {"23-0007", {"Rommel Fajardo", "BSED", "3rd Year-Junior", "3B"}},
    {"23-0008", {"Charlie Norcio", "BSBA", "1st Year-Freshman", "1C"}},
    {"23-0009", {"Giovanni Alvero", "BSIT", "3rd Year-Junior", "3D"}},
    {"23-0010", {"Patrick Cajala", "BSED", "4th Year-Senior", "4E"}},
};

void get_student_info() {
    string student_num;
    cout << "Enter student number: ";
    cin >> student_num;

    auto student = students.find(student_num);
    if (student != students.end()) {
        cout << "+------------------------------------+" << endl;
        cout << "|        STUDENT'S INFORMATION       |  " << endl;
        cout << "+------------------------------------+" << endl;
        cout << "| Name:   " << student->second.name << endl;
        cout << "| Course: " << student->second.course << endl;
        cout << "| Year:   " << student->second.year << endl;
        cout << "| Section: " << student->second.section << endl;
        cout << "+------------------------------------+" << endl;
        cout << "\n" << endl;
    } else {
        cout << "Student not found." << endl;
        get_student_info();
    }
}

void Options(){
    cout << "\nOptions: "                  << endl;
        cout << "[1]. Get Student Information "<< endl;
        cout << "[2]. Get Office Information  "<< endl;
        cout << "[3]. Get Teacher Information "<< endl;
        cout << "[4]. Get Rooms Information   "<< endl;
        cout << "[5]. Courses                 "<< endl;
        cout << "[6]. Quit                    "<< endl;
}
int main() {
    string choice;
    Registrar registrar;
        cout <<"********************************************************************" << endl;
        cout << "                WELCOME TO OUR INFORMATION SYSTEM                     "<<endl;
        cout <<"********************************************************************" << endl;
    while (true) {
        Options();
        
        int option;
        cout << "Enter your choice: ";
        if (!(cin >> option)) {
        cout << "Invalid input. Please enter a number." << endl;
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        continue;
    }
        cin.ignore(numeric_limits<streamsize>::max(), '\n'); 
        switch (option) {
            case 1:
                clearScreen();
                do {
                    get_student_info();
                    cout << "Do you want to search for another student? (yes/no): ";
                    string choice;
                    cin >> choice;
                    clearScreen();
                    if (tolower(choice[0]) != 'y') break;
                } while (true);
                break;

            case 2:
                clearScreen();
                do {
                    get_office_info(registrar);
                    cout << "Do you want to search for another office? (yes/no): ";
                    string choice;
                    cin >> choice;
                    clearScreen();
                    if (tolower(choice[0]) != 'y') break;
                } while (true);
                break;

            case 3:
                clearScreen();
                do {
                    get_Teacher_info();
                    cout << "Do you want to search for another teacher? (yes/no): ";
                    string choice;
                    cin >> choice;
                    clearScreen();
                    if (tolower(choice[0]) != 'y') break;
                } while (true);
                break;
                
            case 4:
            clearScreen();
                do {
                  cout<<" Rooms: "<<endl;
                    cout << "  [1]. Computer Laboratory" << endl;
                    cout << "  [2]. Science Laboratory" << endl;
                    cout << "  [3]. Guidance Office" << endl;
                    cout << "  [4]. Clinic" << endl;
                    cout << "  [5]. Library"<< endl;
                    cout << "  [6]. ICS Office"<<endl;
                    cout << "  [7]. ITE Office"<<endl;
                    cout << "  [8]. IOB Office"<<endl;
                    cout << "Enter Room Number: ";
                    int roomCount = 8;
                    int inputRoomNumber;
        
                while (!(cin >> inputRoomNumber) || inputRoomNumber <= 0 || inputRoomNumber > roomCount) {
                    cout << "Invalid choice. Enter a number between 1 and " << roomCount << ": ";
                    cin.clear();
                    cin.ignore(numeric_limits<streamsize>::max(), '\n');
                }
                printRoomInfo(inputRoomNumber);

                cout << "Do you want to search for another room? (yes/no): ";
                string choice;
                cin >> choice;
                cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

                if (tolower(choice[0]) != 'y') break;
                } while (true);
                break;

                    
            case 5:
                clearScreen();
                displayCourses();
                break;

            case 6:    
                cout << "Thank You For Using Our System!!" << endl;
                return 0;

            default:
                cout << "Invalid option." << endl;
        }        
    }
    }
